class d extends HTMLElement{static get observedAttributes(){return["party"]}attributeChangedCallback(a,b,c){if(!this.__initialized)return;b!==c&&(this[a]=c)}get party(){return this.hasAttribute("party")}set party(a){const b=this.hasAttribute("party");b?this.setAttribute("party",""):this.removeAttribute("party"),this.setParty()}constructor(){super();const a=document.createElement("template");a.innerHTML=d.template(),this.attachShadow({mode:"open"}),this.shadowRoot.appendChild(a.content.cloneNode(!0)),this.__element=this.shadowRoot.querySelector(".marquee"),this.__initialized=!1,this.__partifier=null}async connectedCallback(){this.style.width=this.style.width?this.style.width:"100%",this.style.fontFamily=this.style.fontFamily?this.style.fontFamily:"Comic Sans MS",this.hasAttribute("party")&&this.setParty(),this.__initialized=!0}setParty(){const a=this.hasAttribute("party");a?this.__partifier=setInterval(()=>{const b=Math.floor(Math.random()*255),c=Math.floor(Math.random()*255),e=Math.floor(Math.random()*255);this.__element.style.color=`rgb(${b}, ${c}, ${e})`},400):this.__partifier&&(this.__element.style.color="black",clearInterval(this.__partifier))}static template(){return`
      <style>
      .marquee {
        margin: 0 auto;
        white-space: nowrap;
        overflow: hidden;
        box-sizing: border-box;
      }
      
      .marquee span {
        display: inline-block;
        padding-left: 100%;
        animation: marquee 15s linear infinite;
      }
      
      @keyframes marquee {
        0% {
          transform: translate(0, 0);
        }
        100% {
          transform: translate(-100%, 0);
        }
      }
      </style>
      <p class="marquee" style="width: inherit;"><span><slot></slot></span></p>`}}customElements.define("wc-marquee",d);export{d as WCMarquee};
